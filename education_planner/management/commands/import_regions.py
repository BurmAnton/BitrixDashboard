from django.core.management.base import BaseCommand
from education_planner.models import Region


class Command(BaseCommand):
    help = 'Импортирует регионы России в базу данных'

    def add_arguments(self, parser):
        parser.add_argument(
            '--file',
            type=str,
            help='Путь к файлу с регионами (если не указан, используется список по умолчанию)',
        )

    def handle(self, *args, **options):
        # Список регионов России с кодами
        regions_data = [
            ('01', 'Республика Адыгея'),
            ('02', 'Республика Башкортостан'),
            ('03', 'Республика Бурятия'),
            ('04', 'Республика Алтай'),
            ('05', 'Республика Дагестан'),
            ('06', 'Республика Ингушетия'),
            ('07', 'Кабардино-Балкарская Республика'),
            ('08', 'Республика Калмыкия'),
            ('09', 'Карачаево-Черкесская Республика'),
            ('10', 'Республика Карелия'),
            ('11', 'Республика Коми'),
            ('12', 'Республика Марий Эл'),
            ('13', 'Республика Мордовия'),
            ('14', 'Республика Саха (Якутия)'),
            ('15', 'Республика Северная Осетия — Алания'),
            ('16', 'Республика Татарстан'),
            ('17', 'Республика Тыва'),
            ('18', 'Удмуртская Республика'),
            ('19', 'Республика Хакасия'),
            ('20', 'Чеченская Республика'),
            ('21', 'Чувашская Республика'),
            ('22', 'Алтайский край'),
            ('23', 'Краснодарский край'),
            ('24', 'Красноярский край'),
            ('25', 'Приморский край'),
            ('26', 'Ставропольский край'),
            ('27', 'Хабаровский край'),
            ('28', 'Амурская область'),
            ('29', 'Архангельская область'),
            ('30', 'Астраханская область'),
            ('31', 'Белгородская область'),
            ('32', 'Брянская область'),
            ('33', 'Владимирская область'),
            ('34', 'Волгоградская область'),
            ('35', 'Вологодская область'),
            ('36', 'Воронежская область'),
            ('37', 'Ивановская область'),
            ('38', 'Иркутская область'),
            ('39', 'Калининградская область'),
            ('40', 'Калужская область'),
            ('41', 'Камчатский край'),
            ('42', 'Кемеровская область'),
            ('43', 'Кировская область'),
            ('44', 'Костромская область'),
            ('45', 'Курганская область'),
            ('46', 'Курская область'),
            ('47', 'Ленинградская область'),
            ('48', 'Липецкая область'),
            ('49', 'Магаданская область'),
            ('50', 'Московская область'),
            ('51', 'Мурманская область'),
            ('52', 'Нижегородская область'),
            ('53', 'Новгородская область'),
            ('54', 'Новосибирская область'),
            ('55', 'Омская область'),
            ('56', 'Оренбургская область'),
            ('57', 'Орловская область'),
            ('58', 'Пензенская область'),
            ('59', 'Пермский край'),
            ('60', 'Псковская область'),
            ('61', 'Ростовская область'),
            ('62', 'Рязанская область'),
            ('63', 'Самарская область'),
            ('64', 'Саратовская область'),
            ('65', 'Сахалинская область'),
            ('66', 'Свердловская область'),
            ('67', 'Смоленская область'),
            ('68', 'Тамбовская область'),
            ('69', 'Тверская область'),
            ('70', 'Томская область'),
            ('71', 'Тульская область'),
            ('72', 'Тюменская область'),
            ('73', 'Ульяновская область'),
            ('74', 'Челябинская область'),
            ('75', 'Забайкальский край'),
            ('76', 'Ярославская область'),
            ('77', 'Москва'),
            ('78', 'Санкт-Петербург'),
            ('79', 'Еврейская автономная область'),
            ('83', 'Ненецкий автономный округ'),
            ('86', 'Ханты-Мансийский автономный округ — Югра'),
            ('87', 'Чукотский автономный округ'),
            ('89', 'Ямало-Ненецкий автономный округ'),
            ('91', 'Республика Крым'),
            ('92', 'Севастополь'),
        ]

        if options['file']:
            # Если указан файл, загружаем из файла
            try:
                with open(options['file'], 'r', encoding='utf-8') as f:
                    regions_data = []
                    for line in f:
                        line = line.strip()
                        if line and '\t' in line:
                            code, name = line.split('\t', 1)
                            regions_data.append((code.strip(), name.strip()))
            except FileNotFoundError:
                self.stdout.write(
                    self.style.ERROR(f'Файл {options["file"]} не найден')
                )
                return
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'Ошибка при чтении файла: {e}')
                )
                return

        created_count = 0
        updated_count = 0

        for code, name in regions_data:
            region, created = Region.objects.get_or_create(
                name=name,
                defaults={'code': code, 'is_active': True}
            )
            
            if created:
                created_count += 1
                self.stdout.write(f'Создан регион: {name} (код: {code})')
            else:
                # Обновляем код, если он изменился
                if region.code != code:
                    region.code = code
                    region.save()
                    updated_count += 1
                    self.stdout.write(f'Обновлен код для региона: {name} ({code})')

        self.stdout.write(
            self.style.SUCCESS(
                f'Импорт завершен. Создано: {created_count}, обновлено: {updated_count}'
            )
        )