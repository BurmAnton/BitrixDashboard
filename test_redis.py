#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis –∏ Django –∫–µ—à—É
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('/var/www/BitrixDashboard')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bitrix24_integration.settings')
django.setup()

from django.core.cache import cache
from education_planner.cache_utils import AtlasDataCache
import redis


def test_redis_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis ===")
    try:
        r = redis.Redis(host='localhost', port=6379, db=0)
        result = r.ping()
        print(f"‚úÖ Redis PING: {result}")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
        r.set('test_key', 'test_value', ex=60)
        value = r.get('test_key')
        print(f"‚úÖ Redis set/get test: {value.decode() if value else None}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        return False


def test_django_cache():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Django –∫–µ—à–∞"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Django –∫–µ—à–∞ ===")
    try:
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ –∫–µ—à
        cache.set('test_django_key', 'test_django_value', 60)
        value = cache.get('test_django_key')
        print(f"‚úÖ Django cache set/get test: {value}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–µ—à–µ
        print(f"‚úÖ Cache backend: {cache.__class__.__name__}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Django –∫–µ—à–∞: {e}")
        return False


def test_atlas_cache():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AtlasDataCache"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AtlasDataCache ===")
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–∞
        cache_instance = AtlasDataCache.get_cache()
        print(f"‚úÖ AtlasDataCache instance: {type(cache_instance)}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
        test_key = AtlasDataCache.make_key('test_function', ['arg1'], {'kwarg1': 'value1'})
        print(f"‚úÖ Generated cache key: {test_key[:50]}...")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ AtlasDataCache
        cache_instance.set(test_key, {'test': 'data'}, 60)
        result = cache_instance.get(test_key)
        print(f"‚úÖ AtlasDataCache set/get test: {result}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AtlasDataCache: {e}")
        return False


def test_cache_commands():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–º"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–º ===")
    try:
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∞
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–µ—à–∞...")
        AtlasDataCache.warm_up_cache()
        print("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Atlas
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Atlas...")
        pipeline, atlas_apps, deals = AtlasDataCache.get_cached_atlas_data()
        
        if pipeline:
            print(f"‚úÖ Pipeline –Ω–∞–π–¥–µ–Ω: {pipeline.name}")
        if atlas_apps:
            print(f"‚úÖ Atlas apps –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(atlas_apps)} –∑–∞–ø–∏—Å–µ–π")
        if deals:
            print(f"‚úÖ Deals –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(deals)} –∑–∞–ø–∏—Å–µ–π")
            
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    tests = [
        test_redis_connection,
        test_django_cache,
        test_atlas_cache,
        test_cache_commands
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–∏
    print(f"\n{'='*50}")
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {sum(results)}/{len(results)}")
    
    if all(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! Redis –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py warm_cache --force")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞—à–±–æ—Ä–¥–∞")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ —á–µ—Ä–µ–∑ cron")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    
    print(f"{'='*50}")


if __name__ == '__main__':
    main()
