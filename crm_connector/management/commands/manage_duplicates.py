import logging
import re
from django.core.management.base import BaseCommand
from django.utils import timezone
from crm_connector.models import Deal, Pipeline, AtlasApplication
from crm_connector.bitrix24_api import Bitrix24API

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–µ'
    
    def __init__(self):
        super().__init__()
        self.api = None
        self.pipeline = None
        self.stats = {
            'duplicate_deals_removed': 0,
            'errors': 0
        }
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--pipeline-name',
            type=str,
            default='–ó–∞—è–≤–∫–∏ (–≥—Ä–∞–∂–¥–∞–Ω–µ)',
            help='–ù–∞–∑–≤–∞–Ω–∏–µ –≤–æ—Ä–æ–Ω–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)'
        )
        parser.add_argument(
            '--list-only',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è'
        )
    
    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫...'))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.api = Bitrix24API()
        
        # –ù–∞—Ö–æ–¥–∏–º –≤–æ—Ä–æ–Ω–∫—É
        try:
            self.pipeline = Pipeline.objects.get(name=options['pipeline_name'])
            self.stdout.write(f"–†–∞–±–æ—Ç–∞–µ–º —Å –≤–æ—Ä–æ–Ω–∫–æ–π: {self.pipeline.name}")
        except Pipeline.DoesNotExist:
            self.stdout.write(self.style.ERROR(f"–í–æ—Ä–æ–Ω–∫–∞ '{options['pipeline_name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"))
            return
        
        # –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        self.find_and_remove_duplicates(options['dry_run'] or options['list_only'])
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.print_statistics()
    
    def find_and_remove_duplicates(self, dry_run=False):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ –≤–æ—Ä–æ–Ω–∫–µ, –æ—Å—Ç–∞–≤–ª—è—è —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é.
        """
        self.stdout.write("–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏
        deals = Deal.objects.filter(pipeline=self.pipeline).order_by('created_at', 'bitrix_id')
        self.stdout.write(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ –≤ –≤–æ—Ä–æ–Ω–∫–µ: {deals.count()}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –∫–ª—é—á–∞–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        deal_groups = {}
        
        for deal in deals:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–¥–µ–ª–∫–∏
            deal_details = deal.details or {}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            deal_name = deal_details.get('NAME', '') or deal_details.get('TITLE', '')
            deal_phone = self.extract_phone_from_deal(deal_details)
            deal_email = self.extract_email_from_deal(deal_details)
            deal_snils = self.extract_snils_from_deal(deal_details)
            
            name_norm = self.normalize_name(deal_name)
            phone_norm = self.normalize_phone(deal_phone)
            email_norm = self.normalize_email(deal_email)
            snils_norm = self.normalize_snils(deal_snils)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–¥–µ–ª–∫–∏ –±–µ–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not name_norm and not phone_norm and not email_norm and not snils_norm:
                continue
                
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            duplicate_keys = []
            
            # –°–ù–ò–õ–° - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if snils_norm:
                duplicate_keys.append(('snils', snils_norm))
            
            # –ö–ª—é—á –ø–æ –§–ò–û + —Ç–µ–ª–µ—Ñ–æ–Ω
            if name_norm and phone_norm:
                duplicate_keys.append(('name_phone', name_norm, phone_norm))
                
            # –ö–ª—é—á –ø–æ –§–ò–û + email  
            if name_norm and email_norm:
                duplicate_keys.append(('name_email', name_norm, email_norm))
                
            # –ö–ª—é—á –ø–æ –§–ò–û + –°–ù–ò–õ–°
            if name_norm and snils_norm:
                duplicate_keys.append(('name_snils', name_norm, snils_norm))
                
            # –ö–ª—é—á –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ –§–ò–û)
            if phone_norm and name_norm:
                duplicate_keys.append(('phone', phone_norm))
                
            # –ö–ª—é—á –ø–æ email (–µ—Å–ª–∏ –µ—Å—Ç—å –∏ –§–ò–û)
            if email_norm and name_norm:
                duplicate_keys.append(('email', email_norm))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É –≤ –≥—Ä—É–ø–ø—ã –ø–æ –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∫–ª—é—á–∞–º
            for key in duplicate_keys:
                if key not in deal_groups:
                    deal_groups[key] = []
                deal_groups[key].append(deal)
        
        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
        duplicates_to_remove = []
        
        for key, group_deals in deal_groups.items():
            if len(group_deals) > 1:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
                sorted_deals = sorted(group_deals, key=lambda d: (
                    d.created_at or timezone.now(),
                    d.bitrix_id
                ))
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                keep_deal = sorted_deals[0]
                remove_deals = sorted_deals[1:]
                
                self.stdout.write(f"üîç –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∫–ª—é—á—É {key[0]}:")
                self.stdout.write(f"  ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º: —Å–¥–µ–ª–∫–∞ {keep_deal.bitrix_id} (—Å–æ–∑–¥–∞–Ω–∞: {keep_deal.created_at})")
                
                for deal in remove_deals:
                    self.stdout.write(f"  ‚ùå –£–¥–∞–ª—è–µ–º: —Å–¥–µ–ª–∫–∞ {deal.bitrix_id} (—Å–æ–∑–¥–∞–Ω–∞: {deal.created_at})")
                    if deal not in duplicates_to_remove:
                        duplicates_to_remove.append(deal)
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if duplicates_to_remove:
            self.stdout.write(f"\nüìä –ù–∞–π–¥–µ–Ω–æ {len(duplicates_to_remove)} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            
            if not dry_run:
                # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ batch API –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                self._delete_deals_in_batches(duplicates_to_remove)
                self.stdout.write(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {self.stats['duplicate_deals_removed']} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
            else:
                self.stdout.write("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ —É–¥–∞–ª–µ–Ω—ã")
        else:
            self.stdout.write("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def _delete_deals_in_batches(self, deals_to_delete):
        """–£–¥–∞–ª—è–µ—Ç —Å–¥–µ–ª–∫–∏ –ø–∞–∫–µ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –ë–∏—Ç—Ä–∏–∫—Å24 API"""
        batch_size = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä batch –¥–ª—è –ë–∏—Ç—Ä–∏–∫—Å24
        
        for i in range(0, len(deals_to_delete), batch_size):
            batch = deals_to_delete[i:i + batch_size]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è batch —É–¥–∞–ª–µ–Ω–∏—è
            batch_commands = {}
            for j, deal in enumerate(batch):
                cmd_key = f"delete_{deal.bitrix_id}"
                batch_commands[cmd_key] = [
                    'crm.deal.delete',
                    {'id': deal.bitrix_id}
                ]
            
            self.stdout.write(f"–£–¥–∞–ª—è–µ–º –ø–∞–∫–µ—Ç —Å–¥–µ–ª–æ–∫ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 ({len(batch)} —à—Ç.): {[d.bitrix_id for d in batch]}")
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º batch —É–¥–∞–ª–µ–Ω–∏–µ –≤ –ë–∏—Ç—Ä–∏–∫—Å24
                result = self.api.call_batch(batch_commands)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
                if result and 'result' in result:
                    batch_results = result['result']
                    errors = result['result'].get('result_error', {})
                    
                    for j, deal in enumerate(batch):
                        cmd_key = f"delete_{deal.bitrix_id}"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
                        if cmd_key in errors and errors[cmd_key]:
                            error_info = errors[cmd_key]
                            error_desc = error_info.get('error_description', '') if isinstance(error_info, dict) else str(error_info)
                            
                            # –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, —Å–¥–µ–ª–∫–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞
                            if 'not found' in error_desc.lower() or '–Ω–µ –Ω–∞–π–¥–µ–Ω' in error_desc.lower():
                                self.stdout.write(f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ {deal.bitrix_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24")
                                # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
                                self._remove_deal_locally(deal)
                            else:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ {deal.bitrix_id} –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24: {error_info}")
                                self.stdout.write(self.style.ERROR(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∫—É {deal.bitrix_id}: {error_desc}"))
                            continue
                        
                        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏, —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                        self._remove_deal_locally(deal)
                
                else:
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç batch API: {result}")
                    self.stdout.write(self.style.ERROR("–û—à–∏–±–∫–∞ batch —É–¥–∞–ª–µ–Ω–∏—è: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API"))
                    
                    # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ
                    for deal in batch:
                        self._delete_single_deal(deal)
                        
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ batch —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
                self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ batch —É–¥–∞–ª–µ–Ω–∏—è: {e}"))
                
                # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ
                for deal in batch:
                    self._delete_single_deal(deal)
    
    def _remove_deal_locally(self, deal):
        """–£–¥–∞–ª—è–µ—Ç —Å–¥–µ–ª–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ AtlasApplication –∑–∞–ø–∏—Å–∏
            AtlasApplication.objects.filter(deal=deal).delete()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
            deal.delete()
            
            self.stats['duplicate_deals_removed'] += 1
            self.stdout.write(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞ {deal.bitrix_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ {deal.bitrix_id} –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã: {e}")
            self.stdout.write(self.style.ERROR(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ {deal.bitrix_id}: {e}"))
    
    def _delete_single_deal(self, deal):
        """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π API (fallback –¥–ª—è batch)"""
        try:
            self.stdout.write(f"–£–¥–∞–ª—è–µ–º —Å–¥–µ–ª–∫—É {deal.bitrix_id} –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏...")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π API
            result = self.api.call_method('crm.deal.delete', {'id': deal.bitrix_id})
            
            if result:
                self._remove_deal_locally(deal)
            else:
                logger.error(f"API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ {deal.bitrix_id}")
                self.stdout.write(self.style.ERROR(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∫—É {deal.bitrix_id}: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API"))
                
        except Exception as e:
            error_msg = str(e)
            
            # –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
            if 'not found' in error_msg.lower() or '–Ω–µ –Ω–∞–π–¥–µ–Ω' in error_msg.lower():
                self.stdout.write(f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ {deal.bitrix_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24")
                self._remove_deal_locally(deal)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ {deal.bitrix_id}: {e}")
                self.stdout.write(self.style.ERROR(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∫—É {deal.bitrix_id}: {e}"))
    
    def extract_phone_from_deal(self, deal_details):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏"""
        phone_fields = ['PHONE', 'UF_CRM_PHONE', 'UF_CRM_1234567890123']  # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
        for field in phone_fields:
            phone = deal_details.get(field, '')
            if phone:
                return phone
        return ''
    
    def extract_email_from_deal(self, deal_details):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç email –∏–∑ –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏"""
        email_fields = ['EMAIL', 'UF_CRM_EMAIL', 'UF_CRM_1234567890124']  # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
        for field in email_fields:
            email = deal_details.get(field, '')
            if email:
                return email
        return ''
    
    def extract_snils_from_deal(self, deal_details):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –°–ù–ò–õ–° –∏–∑ –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏"""
        if not deal_details:
            return ''
        
        # –°–ù–ò–õ–° —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º –ø–æ–ª–µ UF_CRM_1750933149374
        snils_field = 'UF_CRM_1750933149374'
        snils = deal_details.get(snils_field, '')
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if not snils:
            alternative_fields = ['UF_CRM_SNILS', 'SNILS', 'UF_SNILS']
            for field in alternative_fields:
                snils = deal_details.get(field, '')
                if snils:
                    break
        
        return str(snils) if snils else ''
    
    def normalize_name(self, name):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –§–ò–û –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not name:
            return ''
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        normalized = ' '.join(name.lower().split())
        
        # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤
        normalized = normalized.replace('.', '')
        
        return normalized
    
    def normalize_phone(self, phone):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not phone:
            return ''
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        digits = ''.join(filter(str.isdigit, str(phone)))
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if digits.startswith('7') and len(digits) == 11:
            digits = digits[1:]
        elif digits.startswith('8') and len(digits) == 11:
            digits = digits[1:]
        
        return digits
    
    def normalize_email(self, email):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç email –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not email:
            return ''
        
        return email.lower().strip()
    
    def normalize_snils(self, snils):
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –°–ù–ò–õ–° –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not snils:
            return ''
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        digits = re.sub(r'[^\d]', '', str(snils))
        
        # –°–ù–ò–õ–° –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 11 —Ü–∏—Ñ—Ä
        if len(digits) == 11:
            return digits
        
        return ''
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stdout.write("\n" + "="*50)
        self.stdout.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í:")
        self.stdout.write(f"–£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {self.stats['duplicate_deals_removed']}")
        self.stdout.write(f"–û—à–∏–±–æ–∫: {self.stats['errors']}")
        self.stdout.write("="*50 + "\n") 