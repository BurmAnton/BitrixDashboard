from django.contrib import admin
from .models import Pipeline, Stage, Deal, Company, Lead, Contact, AtlasApplication, STAGE_TYPE_CHOICES, AtlasStatus, RRStatus, StageRule, AtlasProgram
from django import forms
from django.contrib import messages
from django.utils.html import format_html
from django.urls import reverse
from django.db.models import Count, Sum, Q
from django.utils import timezone
from simple_history.admin import SimpleHistoryAdmin

class StageInline(admin.TabularInline):
    model = Stage
    extra = 0
    fields = ('bitrix_id', 'name', 'sort', 'color', 'status_id', 'success_probability')

@admin.register(Pipeline)
class PipelineAdmin(SimpleHistoryAdmin):
    list_display = ['name', 'bitrix_id', 'is_main', 'is_active', 'sort', 'stage_count', 'deal_count', 'last_sync_display']
    search_fields = ('name', 'bitrix_id')
    list_filter = ('is_active', 'is_main')
    inlines = [StageInline]
    
    def stage_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤ –≤ –≤–æ—Ä–æ–Ω–∫–µ"""
        return obj.stages.count()
    stage_count.short_description = '–≠—Ç–∞–ø–æ–≤'
    
    def deal_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –≤ –≤–æ—Ä–æ–Ω–∫–µ"""
        return obj.deals.count()
    deal_count.short_description = '–°–¥–µ–ª–æ–∫'
    
    def last_sync_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if obj.last_sync:
            return obj.last_sync.strftime('%d.%m.%Y %H:%M')
        return '-'
    last_sync_display.short_description = '–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'

@admin.register(Stage)
class StageAdmin(SimpleHistoryAdmin):
    list_display = ['name', 'colored_type', 'pipeline', 'bitrix_id', 'sort', 'deal_count']
    list_filter = ('pipeline', 'type')
    search_fields = ('name',)
    ordering = ('pipeline', 'sort')
    actions = ['set_process_type', 'set_success_type', 'set_failure_type']
    readonly_fields = ('color_display',)
    
    def colored_type(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∏–ø —Å—Ç–∞–¥–∏–∏ —Å —Ü–≤–µ—Ç–æ–º"""
        colors = {
            'process': '#5bc0de',
            'success': '#5cb85c', 
            'failure': '#d9534f'
        }
        color = colors.get(obj.type, '#999')
        return format_html(
            '<span style="display:inline-block; padding: 3px 8px; color: white; background-color: {}; border-radius: 3px;">{}</span>',
            color, obj.get_type_display()
        )
    colored_type.short_description = '–¢–∏–ø'
    
    def deal_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ"""
        return obj.deals.count()
    deal_count.short_description = '–°–¥–µ–ª–æ–∫'
    
    def color_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ü–≤–µ—Ç —ç—Ç–∞–ø–∞ –≤ –≤–∏–¥–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞"""
        if obj.color:
            from django.utils.safestring import mark_safe
            return mark_safe(f'<span style="display:inline-block; width:20px; height:20px; background-color:{obj.color}"></span> {obj.color}')
        return '-'
    color_display.short_description = '–¶–≤–µ—Ç'
    
    def set_process_type(self, request, queryset):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∏–ø '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–¥–∏–π"""
        updated = queryset.update(type='process')
        self.message_user(request, f'–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} —Å—Ç–∞–¥–∏–π (—Ç–∏–ø: –í –ø—Ä–æ—Ü–µ—Å—Å–µ)')
    set_process_type.short_description = "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∏–ø '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'"
    
    def set_success_type(self, request, queryset):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∏–ø '–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ' –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–¥–∏–π"""
        updated = queryset.update(type='success')
        self.message_user(request, f'–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} —Å—Ç–∞–¥–∏–π (—Ç–∏–ø: –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)')
    set_success_type.short_description = "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∏–ø '–£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ'"
    
    def set_failure_type(self, request, queryset):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∏–ø '–ù–µ—É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ' –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–¥–∏–π"""
        updated = queryset.update(type='failure')
        self.message_user(request, f'–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated} —Å—Ç–∞–¥–∏–π (—Ç–∏–ø: –ù–µ—É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)')
    set_failure_type.short_description = "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∏–ø '–ù–µ—É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ'"

@admin.register(Deal)
class DealAdmin(SimpleHistoryAdmin):
    list_display = ['title', 'bitrix_id', 'pipeline', 'stage', 'amount', 'is_closed', 'created_at', 'last_sync', 'view_history_link']
    list_display = ['title', 'bitrix_id', 'pipeline', 'stage', 'amount', 'company', 'region', 'created_at', 'last_sync', 'view_history_link']
    list_filter = ('pipeline', 'stage', 'is_closed', 'created_at')
    search_fields = ('title', 'bitrix_id')
    readonly_fields = ('bitrix_id', 'created_at', 'closed_at', 'last_sync', 'details_pretty', 'view_history_link')
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('bitrix_id', 'title', 'pipeline', 'stage', 'program', 'company','region', 'amount', 'is_closed', 'is_new')
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('created_at', 'closed_at', 'last_sync')
        }),
        ('–ò—Å—Ç–æ—Ä–∏—è', {
            'fields': ('view_history_link',)
        }),
        ('–î–µ—Ç–∞–ª–∏', {
            'fields': ('details_pretty',),
        }),
    )
    
    def view_history_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏"""
        if obj.pk:
            url = reverse('crm_connector:object_history', args=['deal', obj.pk])
            return format_html('<a href="{}" target="_blank">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π</a>', url)
        return '-'
    view_history_link.short_description = '–ò—Å—Ç–æ—Ä–∏—è'
    
    def details_pretty(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if not obj.details:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        from django.utils.safestring import mark_safe
        import json
        formatted_json = json.dumps(obj.details, ensure_ascii=False, indent=2)
        return mark_safe(f'<pre>{formatted_json}</pre>')
    
    details_pretty.short_description = '–î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏'

admin.site.register(Lead, admin.ModelAdmin)

@admin.register(Company)
class CompanyAdmin(admin.ModelAdmin):
    list_display = ['title', 'bitrix_id']
    search_fields = ['title', 'bitrix_id']

@admin.register(Contact)
class ContactAdmin(admin.ModelAdmin):
    list_display = ('name', 'last_name', 'phone', 'email', 'bitrix_id')
    search_fields = ('name', 'last_name', 'phone', 'email')
    list_filter = ('created_at',)

@admin.register(AtlasProgram)
class AtlasProgramAdmin(admin.ModelAdmin):
    list_display = ['program_id', 'title', 'short_title']
    search_fields = ['program_id', 'title', 'short_title']
    readonly_fields = ['section', 'topics']

@admin.register(AtlasApplication)
class AtlasApplicationAdmin(SimpleHistoryAdmin):
    list_display = ['application_id', 'full_name', 'phone', 'email', 'region', 'deal_link', 'is_synced', 'last_sync', 'history_link']
    list_filter = ['is_synced', 'region', 'created_at', 'last_sync']
    search_fields = ['application_id', 'full_name', 'phone', 'email']
    readonly_fields = ['created_at', 'updated_at', 'last_sync', 'raw_data_formatted', 'history_link', 'JSON_ed_progress', 'generated_application_link', 'signed_application_link']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('application_id', 'full_name', 'phone', 'email', 'region', 'postal_code', 'JSON_ed_progress')
        }),
        ('–°–≤—è–∑—å —Å –ë–∏—Ç—Ä–∏–∫—Å24', {
            'fields': ('deal', 'is_synced', 'sync_errors')
        }),
        ('–ò—Å—Ç–æ—Ä–∏—è', {
            'fields': ('history_link',)
        }),
        ('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', {
            'fields': ('raw_data_formatted',),
            'classes': ('collapse',)
        }),
        ('–§–∞–π–ª—ã', {
            'fields': ('generated_application_link', 'signed_application_link')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at', 'last_sync')
        })
    )
    
    def history_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏"""
        if obj.pk:
            url = reverse('crm_connector:object_history', args=['atlasapplication', obj.pk])
            return format_html('<a href="{}" target="_blank">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é</a>', url)
        return '-'
    history_link.short_description = '–ò—Å—Ç–æ—Ä–∏—è'
    
    def deal_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É"""
        if obj.deal:
            url = reverse('admin:crm_connector_deal_change', args=[obj.deal.id])
            return format_html('<a href="{}">{}</a>', url, obj.deal.title)
        return '-'
    deal_link.short_description = '–°–¥–µ–ª–∫–∞'
    
    def raw_data_formatted(self, obj):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ JSON –¥–∞–Ω–Ω—ã—Ö"""
        import json
        if obj.raw_data:
            formatted = json.dumps(obj.raw_data, indent=2, ensure_ascii=False)
            return format_html('<pre style="white-space: pre-wrap;">{}</pre>', formatted)
        return '-'
    raw_data_formatted.short_description = '–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
    
    def generated_application_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ"""
        if obj.generated_application:
            url = obj.generated_application.url
            filename = obj.generated_application.name.split('/')[-1]
            return format_html('<a href="{}" target="_blank">üìÑ {}</a>', url, filename)
        return '-'
    generated_application_link.short_description = '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ'
    
    def signed_application_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ"""
        if obj.signed_application:
            url = obj.signed_application.url
            filename = obj.signed_application.name.split('/')[-1]
            return format_html('<a href="{}" target="_blank">‚úçÔ∏è {}</a>', url, filename)
        return '-'
    signed_application_link.short_description = '–ü–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ'
    
    actions = ['sync_with_bitrix', 'mark_as_synced']
    
    def sync_with_bitrix(self, request, queryset):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        self.message_user(request, f"–§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    sync_with_bitrix.short_description = "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –ë–∏—Ç—Ä–∏–∫—Å24"
    
    def mark_as_synced(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"""
        updated = queryset.update(is_synced=True, last_sync=timezone.now())
        self.message_user(request, f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {updated} –∑–∞—è–≤–æ–∫")
    mark_as_synced.short_description = "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"

@admin.register(AtlasStatus)
class AtlasStatusAdmin(admin.ModelAdmin):
    list_display = ['name', 'order', 'is_active']
    list_filter = ['is_active']
    search_fields = ['name']
    ordering = ['order', 'name']

@admin.register(RRStatus)
class RRStatusAdmin(admin.ModelAdmin):
    list_display = ['name', 'order', 'is_active']
    list_filter = ['is_active']
    search_fields = ['name']
    ordering = ['order', 'name']

@admin.register(StageRule)
class StageRuleAdmin(admin.ModelAdmin):
    list_display = ['__str__', 'pipeline', 'target_stage', 'priority', 'is_active']
    list_filter = ['pipeline', 'is_active', 'target_stage']
    search_fields = ['description', 'atlas_status__name', 'rr_status__name']
    ordering = ['priority', 'id']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('pipeline', 'target_stage', 'priority', 'is_active')
        }),
        ('–£—Å–ª–æ–≤–∏—è', {
            'fields': ('atlas_status', 'rr_status'),
            'description': '–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–∞–≤–∏–ª–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Å–æ–≤–ø–∞–¥—É—Ç.'
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': ('description',),
            'classes': ('collapse',)
        }),
    )
    
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        """–§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞–¥–∏–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–µ"""
        if db_field.name == "target_stage":
            if request.resolver_match.kwargs.get('object_id'):
                # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
                try:
                    rule = StageRule.objects.get(pk=request.resolver_match.kwargs['object_id'])
                    kwargs["queryset"] = Stage.objects.filter(pipeline=rule.pipeline)
                except StageRule.DoesNotExist:
                    pass
        return super().formfield_for_foreignkey(db_field, request, **kwargs) 